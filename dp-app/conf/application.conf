# HORTONWORKS DATAPLANE SERVICE AND ITS CONSTITUENT SERVICES
# (c) 2016-2018 Hortonworks, Inc. All rights reserved.
# This code is provided to you pursuant to your written agreement with Hortonworks, which may be the terms of the
# Affero General Public License version 3 (AGPLv3), or pursuant to a written agreement with a third party authorized
# to distribute this code.  If you do not have a written agreement with Hortonworks or with an authorized and
# properly licensed third party, you do not have any rights to this code.
# If this code is provided to you under the terms of the AGPLv3:
#   (A) HORTONWORKS PROVIDES THIS CODE TO YOU WITHOUT WARRANTIES OF ANY KIND;
# (B) HORTONWORKS DISCLAIMS ANY AND ALL EXPRESS AND IMPLIED WARRANTIES WITH RESPECT TO THIS CODE, INCLUDING BUT NOT
# LIMITED TO IMPLIED WARRANTIES OF TITLE, NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE;
# (C) HORTONWORKS IS NOT LIABLE TO YOU, AND WILL NOT DEFEND, INDEMNIFY, OR HOLD YOU HARMLESS FOR ANY CLAIMS ARISING
# FROM OR RELATED TO THE CODE; AND
# (D) WITH RESPECT TO YOUR EXERCISE OF ANY RIGHTS GRANTED TO YOU FOR THE CODE, HORTONWORKS IS NOT LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, PUNITIVE OR CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO,
# DAMAGES RELATED TO LOST REVENUE, LOST PROFITS, LOSS OF INCOME, LOSS OF BUSINESS ADVANTAGE OR UNAVAILABILITY,
# OR LOSS OR CORRUPTION OF DATA.

#
# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "changeme"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

#dp-keystore settings
dp.keystore.path=${PWD}/dp-build/shared/dp-keystore.jceks
dp.keystore.password=changeit

play.http.filters=controllers.Filters
#General settings
scheduler.cluster.sync.interval = 1  // minutes
apicall.timeout=5000 //in millis

dp.services {
  db.service.uri = "http://localhost:9005"
  db.service.path = "/service/db"
  cluster.service.uri = "http://localhost:9009"
  cluster.service.path = "/service/clusters"
}

cluster {
  rm.health.request {
    param = "components/RESOURCEMANAGER"
  }
  dn.health.request {
    param = "components/DATANODE"
  }
}

consul {
  #unique name
  serviceId = "core_01"
  #common name across instances
  serviceName = "core"
  service.tags = ["core-service"]
  service.port = 9000
  client.connect.failure.retry.secs = 5
  host = "localhost"
  port = 8500
}

gateway {
  ssl.enabled = false
  refresh.servers.secs = 60
}
#smartsense
smartsense.regex="A-[0-9]{8}-C-[0-9]{8}"
  #Authentication

auth.users {

  seed:[{
    user:"admin"
    pass:"admin"
    type:"SUPERUSER",
    admin:"true"
  },
    {
      user:"analyst"
      pass:"analyst"
      type:"ANALYSTADMIN",
      admin:"false"
    },
    {
      user:"infra"
      pass:"infra"
      type:"INFRAADMIN"
      admin:"false"
    },
    {
      user:"steward"
      pass:"steward"
      type:"ANALYSTADMIN"
      admin:"false"
    }]

  }

dlm.dependent.services.mandatory = [
  "BEACON",
  "HIVE",
  "HDFS"
]
dss.dependent.services.mandatory = ["ATLAS"]
dss.dependent.services.optional = [
  "DPPROFILER",
  "RANGER"
]

dp.certificate {
  query.timeout = "4 minutes"
  algorithm.blacklist.key = [
    "RSA keySize < 1024"
  ]
  algorithm.blacklist.signature = [
    "RSA keySize < 1024"
  ]
}

  #Atlas
  #Reload all tables fom the cache
  atlas.api.tableCache.reload.minutes=5
  atlas.api.tableCache.limit=10000
  #Expire table from cache
  atlas.api.tableCache.time.minutes=15

  include "solr.conf"
